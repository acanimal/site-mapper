// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, config, escapeXmlValue, fs, Sitemap, Stream, urlXml;
  config = require('./config');
  fs = require('fs');
  Stream = require('stream');
  async = require('async');
  escapeXmlValue = function (str) {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
  };
  urlXml = function (url) {
    var xml;
    xml = '<url><loc>' + url.url + '</loc><lastmod>' + url.updatedAt.toISOString() + '</lastmod><changefreq>' + url.changefreq + '</changefreq><priority>' + url.priority + '</priority>';
    if (null != url.image)
      xml = xml + ('<image:image><image:loc>' + url.image + '</image:loc></image:image>');
    return xml + '</url>';
  };
  module.exports = Sitemap = function () {
    function Sitemap(sitemapConfig, location, fileName) {
      this.location = location;
      this.fileName = fileName;
      this.sitemapConfig = sitemapConfig;
      this.urlCount = 0;
    }
    Sitemap.prototype.open = function () {
      var sitemapThis;
      this.sitemapConfig.generateOptions.out.write('!! sitemap open ' + this.fileName + '\n');
      this.file = fs.createWriteStream(this.fileName);
      this.stream = new Stream;
      this.flushed = false;
      this.fileFlushed = false;
      this.closed = false;
      this.gzipper = require('zlib').createGzip();
      sitemapThis = this;
      this.gzipper.on('end', function () {
        return sitemapThis.flushed = true;
      });
      this.file.on('close', function () {
        return sitemapThis.fileFlushed = true;
      });
      this.stream.pipe(this.gzipper).pipe(this.file);
      return this.stream.emit('data', config.sitemapHeader);
    };
    Sitemap.prototype.notifyWhenDone = function (cb) {
      var sitemapThis;
      sitemapThis = this;
      return process.nextTick(function () {
        return async.until(function () {
          return sitemapThis.flushed && sitemapThis.fileFlushed;
        }, function (untilCb) {
          return setTimeout(untilCb, 1e3);
        }, function (err) {
          sitemapThis.sitemapConfig.generateOptions.out.write('!! sitemap done ' + sitemapThis.fileName + ', ' + sitemapThis.urlCount + ' urls, err: ' + err + '\n');
          return cb(err, true);
        });
      });
    };
    Sitemap.prototype.close = function () {
      if (this.closed)
        return;
      this.closed = true;
      this.stream.emit('data', '</urlset>');
      return this.stream.emit('end');
    };
    Sitemap.prototype.addUrl = function (url) {
      var ex, util;
      if (this.urlCount === 0)
        this.open();
      this.urlCount += 1;
      try {
        return this.stream.emit('data', urlXml(url));
      } catch (e$) {
        ex = e$;
        util = require('util');
        return this.sitemapConfig.generateOptions.out.write('!!ERROR: Could not convert url: ' + util.inspect(url) + ' to xml: ' + util.inspect(ex) + '\n');
      }
    };
    Sitemap.prototype.asIndexXml = function () {
      return '<sitemap><loc>' + escapeXmlValue(this.location) + '</loc><lastmod>' + new Date().toISOString() + '</lastmod></sitemap>';
    };
    return Sitemap;
  }();
}.call(this);
