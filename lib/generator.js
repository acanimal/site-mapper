// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, cache$, config, CsvFileSource, each, extend, generateSitemaps, HttpSource, isEmpty, isFunction, SiteMapper, Source, StaticSetSource, util;
  config = require('./config');
  SiteMapper = require('./site_mapper');
  Source = require('./site_mapper/source');
  HttpSource = require('./site_mapper/http_source');
  StaticSetSource = require('./site_mapper/static_set_source');
  CsvFileSource = require('./site_mapper/csv_file_source');
  cache$ = require('underscore');
  each = cache$.each;
  extend = cache$.extend;
  isEmpty = cache$.isEmpty;
  isFunction = cache$.isFunction;
  async = require('async');
  util = require('util');
  generateSitemaps = function (options, cb) {
    var tasks;
    if (!cb && isFunction(options)) {
      cb = options;
      options = null;
    }
    options = extend({}, { out: process.stdout }, options);
    config.addAppSpecific();
    config.generateOptions = options;
    tasks = [];
    each(config.sitemaps, function (sitemapConfig, sitemapName) {
      return tasks.push(function (taskCb) {
        var sitemapper;
        config.generateOptions.out.write('Generating sitemaps for configuration ' + sitemapName + '\n');
        sitemapConfig.generateOptions = config.generateOptions;
        sitemapper = new SiteMapper(sitemapConfig);
        return sitemapper.generateSitemap(taskCb);
      });
    });
    return async.waterfall(tasks, function (err, results) {
      if (err)
        config.generateOptions.out.write('ERR: ' + util.inspect(err) + '\n');
      config.generateOptions.out.write('All sitemaps done\n');
      if ((null != options ? options.out : void 0) !== process.stdout)
        config.generateOptions.out.end();
      return cb && cb(err, results);
    });
  };
  module.exports = {
    generateSitemaps: generateSitemaps,
    Source: Source,
    HttpSource: HttpSource,
    StaticSetSource: StaticSetSource,
    SiteMapper: SiteMapper,
    CsvFileSource: CsvFileSource,
    config: config
  };
}.call(this);
