// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, cache$, config, each, extend, fs, map, reduce, SitemapGroup, SiteMapper, util;
  config = require('./config');
  util = require('util');
  async = require('async');
  fs = require('fs');
  SitemapGroup = require('./sitemap_group');
  cache$ = require('underscore');
  each = cache$.each;
  map = cache$.map;
  reduce = cache$.reduce;
  extend = cache$.extend;
  module.exports = SiteMapper = function () {
    function SiteMapper(sitemapConfig) {
      var buildDir;
      this.sitemapConfig = extend({}, config.defaultSitemapConfig, sitemapConfig);
      this.targetDirectory = this.sitemapConfig.targetDirectory;
      buildDir = function (parentPath, nextPath) {
        var fullPath;
        fullPath = parentPath.length > 0 && parentPath !== '/' ? '' + parentPath + '/' + nextPath : '' + parentPath + nextPath;
        if (fullPath !== '.' && fullPath !== '') {
          if (!fs.existsSync(fullPath)) {
            fs.mkdirSync(fullPath);
          }
        } else if (fullPath === '') {
          fullPath = '/';
        }
        return fullPath;
      };
      reduce(this.targetDirectory.split('/'), buildDir, '');
      this.sitemapIndex = this.sitemapConfig.sitemapIndex;
      this.sources = this.initializeSources();
      this.sitemapGroups = {};
    }
    SiteMapper.prototype.initializeSources = function () {
      var buildSource;
      this.sources = [];
      buildSource = function (this$) {
        return function (sourceDefinition) {
          var sourceClass, sourceConfig;
          sourceConfig = sourceDefinition(this$.sitemapConfig);
          sourceClass = sourceConfig.type;
          return new sourceClass(extend({}, {
            out: this$.sitemapConfig.generateOptions.out,
            urlFormatter: config.defaultUrlFormatter(this$.sitemapConfig)
          }, sourceConfig.options));
        };
      }(this);
      this.sitemapConfig.generateOptions.out.write('Initializing sources: ' + util.inspect(config.sources) + ', sourceConfig = ' + util.inspect(this.sitemapConfig.sources) + '\n');
      each(config.sources, function (this$) {
        return function (sourceDefinition, sourceName) {
          this$.sitemapConfig.generateOptions.out.write('Working on source ' + sourceName + ': ' + util.inspect(sourceDefinition) + '\n');
          if ((null != this$.sitemapConfig.sources && null != this$.sitemapConfig.sources.includes ? this$.sitemapConfig.sources.includes.length : void 0) > 0) {
            if ((null != this$.sitemapConfig.sources && null != this$.sitemapConfig.sources.includes ? this$.sitemapConfig.sources.includes.indexOf(sourceName) : void 0) >= 0) {
              this$.sitemapConfig.generateOptions.out.write(' -> Including source ' + sourceName + ' because it is in includes: ' + (null != this$.sitemapConfig.sources && null != this$.sitemapConfig.sources.includes ? this$.sitemapConfig.sources.includes.indexOf(sourceName) : void 0) + '\n');
              return this$.sources.push(buildSource(sourceDefinition));
            }
          } else {
            if ((null != this$.sitemapConfig.sources && null != this$.sitemapConfig.sources.excludes ? this$.sitemapConfig.sources.excludes.length : void 0) > 0)
              if ((null != this$.sitemapConfig.sources && null != this$.sitemapConfig.sources.excludes ? this$.sitemapConfig.sources.excludes.indexOf(sourceName) : void 0) >= 0) {
                this$.sitemapConfig.generateOptions.out.write(' -> Skipping source ' + sourceName + ' because it is in excludes\n');
                return;
              }
            this$.sitemapConfig.generateOptions.out.write(' -> Including source ' + sourceName + ' because it is in not in excludes ' + (null != this$.sitemapConfig.sources && null != this$.sitemapConfig.sources.excludes ? this$.sitemapConfig.sources.excludes.indexOf(sourceName) : void 0) + '\n');
            return this$.sources.push(buildSource(sourceDefinition));
          }
        };
      }(this));
      if (this.sources.length <= 0)
        throw 'No sitemap Source definitions';
      return this.sources;
    };
    SiteMapper.prototype.generateSitemap = function (generateCb) {
      var addUrlCb, seriesTasks;
      this.sitemapConfig.generateOptions.out.write('Generating sitemaps for ' + this.sources.length + ' sources, environment = ' + config.env + ', generateCb: ' + util.inspect(generateCb) + ' ...\n');
      addUrlCb = function (this$) {
        return function (url) {
          return this$.addUrl(url);
        };
      }(this);
      seriesTasks = [];
      seriesTasks.push(function (this$) {
        return function (stCb) {
          var parallelTasks;
          parallelTasks = map(this$.sources, function (source) {
            return function (cb) {
              source.on('done', function (result) {
                return cb(null, result);
              });
              source.on('error', function (error) {
                return cb(error, null);
              });
              return source.generateUrls(addUrlCb);
            };
          });
          return async.series(parallelTasks, function (err, results) {
            return stCb(err, results);
          });
        };
      }(this));
      seriesTasks.push(function (this$) {
        return function (stCb) {
          var parallelTasks;
          this$.sitemapConfig.generateOptions.out.write('Waiting for sitemap groups ...\n');
          parallelTasks = map(this$.sitemapGroups, function (group, channel) {
            return function (cb) {
              return group.notifyWhenDone(cb);
            };
          });
          return async.parallel(parallelTasks, function (err, results) {
            return stCb(err, results);
          });
        };
      }(this));
      return async.series(seriesTasks, function (this$) {
        return function (err, results) {
          var errorMessage;
          if (null != err) {
            errorMessage = 'ERROR! generating sitemaps: ' + util.inspect(err);
            this$.sitemapConfig.generateOptions.out.write('\n\n' + errorMessage + '\n\n');
            if (null != generateCb) {
              return generateCb(err, null);
            } else {
              return process.exit(2);
            }
          } else {
            return this$.createIndex(generateCb);
          }
        };
      }(this));
    };
    SiteMapper.prototype.createIndex = function (cb) {
      var index;
      this.sitemapConfig.generateOptions.out.write('Creating sitemap index ' + this.sitemapConfig.sitemapIndex + ' ...\n');
      index = fs.createWriteStream('' + this.sitemapConfig.targetDirectory + '/' + this.sitemapConfig.sitemapIndex);
      if (null != cb)
        index.on('finish', function () {
          return cb();
        });
      index.write(config.sitemapIndexHeader);
      each(this.sitemapGroups, function (group, channel) {
        return each(group.sitemaps, function (sitemap) {
          return index.write(sitemap.asIndexXml());
        });
      });
      index.write('</sitemapindex>');
      return index.end();
    };
    SiteMapper.prototype.addUrl = function (url) {
      var sitemapGroup;
      sitemapGroup = this.sitemapGroupForChannel(url.channel || 'home');
      return sitemapGroup.addUrl(url);
    };
    SiteMapper.prototype.sitemapGroupForChannel = function (channel) {
      var group;
      group = this.sitemapGroups[channel];
      if (!(null != group))
        group = this.sitemapGroups[channel] = new SitemapGroup(this.sitemapConfig, channel);
      return group;
    };
    return SiteMapper;
  }();
}.call(this);
