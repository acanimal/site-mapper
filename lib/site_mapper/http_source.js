// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var defaultBodyProcessor, defaultChannelForUrl, each, HttpSource, request, Source, util;
  Source = require('./source');
  request = require('request');
  each = require('underscore').each;
  util = require('util');
  defaultChannelForUrl = function (url) {
    return url.split('/')[0];
  };
  defaultBodyProcessor = function (body) {
    if (null != body) {
      return body.split('\n');
    } else {
      return [];
    }
  };
  module.exports = HttpSource = function (super$) {
    extends$(HttpSource, super$);
    function HttpSource(options) {
      Source.call(this, options);
      this.url = this.options.serviceUrl;
      this.defaultChannel = this.options.channel;
      this.channelForUrl = this.options.channelForUrl || defaultChannelForUrl;
      this.bodyProcessor = this.options.bodyProcessor || defaultBodyProcessor;
      this.allowNoUrls = this.options.allowNoUrls;
    }
    HttpSource.prototype._generateUrls = function (cb) {
      var updatedAt;
      this.out.write('Generating sitemap urls from service url ' + this.url + '\n');
      updatedAt = new Date;
      return request(this.url, function (this$) {
        return function (error, response, body) {
          var urls;
          if (error) {
            return this$.error(error);
          } else if (response.statusCode !== 200) {
            return this$.error({
              message: 'HTTP request got non-200 response',
              statusCode: response.statusCode,
              url: this$.url
            });
          } else {
            urls = this$.bodyProcessor(body);
            this$.out.write('Read ' + ((null != body ? body.length : void 0) || 0) + ' bytes from ' + this$.url + ', ' + urls.length + ' urls, first: ' + util.inspect(urls[0]) + ', status: ' + response.statusCode + '\n');
            if (urls.length <= 0 && !this$.allowNoUrls) {
              return this$.error({
                message: 'Despite 200 response, no valid urls were returned',
                statusCode: 204,
                url: this$.url
              });
            } else {
              each(urls, function (this$1) {
                return function (url) {
                  return cb({
                    url: this$1.urlFormatter(url),
                    channel: this$1.defaultChannel || this$1.channelForUrl(url),
                    updatedAt: url.updatedAt || updatedAt,
                    changefreq: this$1.changefreq,
                    priority: this$1.priority,
                    image: url.image
                  });
                };
              }(this$));
              return this$.end();
            }
          }
        };
      }(this));
    };
    return HttpSource;
  }(Source);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
