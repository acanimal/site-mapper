// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var csv, CsvFileSource, Source, util;
  Source = require('./source');
  csv = require('csv');
  util = require('util');
  module.exports = CsvFileSource = function (super$) {
    extends$(CsvFileSource, super$);
    function CsvFileSource(options) {
      Source.call(this, options);
      this.fileName = options.fileName;
      this.channel = options.channel;
    }
    CsvFileSource.prototype._generateUrls = function (cb) {
      var err, updatedAt;
      this.out.write('Generating sitemap urls from csv ' + this.fileName + '\n');
      updatedAt = new Date;
      try {
        return csv().from.path(this.fileName).on('record', function (this$) {
          return function (row, index) {
            var imageUrl;
            imageUrl = (null != row[1] ? row[1].length : void 0) ? row[1] : null;
            return cb({
              url: this$.urlFormatter(row[0]),
              channel: this$.channel,
              updatedAt: updatedAt,
              changefreq: this$.changefreq,
              priority: this$.priority,
              image: imageUrl
            });
          };
        }(this)).on('error', function (this$) {
          return function (err) {
            return this$.error(err);
          };
        }(this)).on('end', function (this$) {
          return function (count) {
            this$.out.write('!! Read ' + count + ' urls from csv\n');
            return this$.end();
          };
        }(this));
      } catch (e$) {
        err = e$;
        this.out.write('!! exception parsing csv ' + err + '\n');
        return this.error(err);
      }
    };
    return CsvFileSource;
  }(Source);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
