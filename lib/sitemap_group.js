// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, config, each, Sitemap, SitemapGroup;
  config = require('./config');
  async = require('async');
  each = require('underscore').each;
  Sitemap = require('./sitemap');
  module.exports = SitemapGroup = function () {
    function SitemapGroup(sitemapConfig, channel) {
      sitemapConfig.generateOptions.out.write('Creating SitemapGroup for channel ' + channel + '\n');
      this.sitemapConfig = sitemapConfig;
      this.baseUrl = '' + this.sitemapConfig.sitemapRootUrl + this.sitemapConfig.sitemapFileDirectory;
      this.directory = this.sitemapConfig.targetDirectory;
      this.channel = channel;
      this.urlCount = 0;
      this.groupCount = 1;
      this.maxUrlsPerFile = this.sitemapConfig.maxUrlsPerFile;
      this.sitemaps = [];
    }
    SitemapGroup.prototype.addUrl = function (url) {
      var sitemap;
      sitemap = this.currentSitemap();
      sitemap.addUrl(url);
      return this.urlCount += 1;
    };
    SitemapGroup.prototype.currentSitemap = function () {
      var fileName, sitemap, sitemapIndex;
      sitemapIndex = Math.floor(this.urlCount / this.maxUrlsPerFile);
      fileName = '' + this.channel + sitemapIndex + '.xml.gz';
      sitemap = this.sitemaps[sitemapIndex];
      if (!(null != sitemap))
        sitemap = this.sitemaps[sitemapIndex] = new Sitemap(this.sitemapConfig, '' + this.baseUrl + '/' + fileName, '' + this.directory + '/' + fileName);
      return sitemap;
    };
    SitemapGroup.prototype.notifyWhenDone = function (allDoneCb) {
      return process.nextTick(function (this$) {
        return function () {
          var seriesTasks;
          seriesTasks = [];
          each(this$.sitemaps, function (sitemap) {
            sitemap.close();
            return seriesTasks.push(function (cb) {
              return sitemap.notifyWhenDone(cb);
            });
          });
          return async.series(seriesTasks, function (err, results) {
            return allDoneCb(err, results);
          });
        };
      }(this));
    };
    return SitemapGroup;
  }();
}.call(this);
